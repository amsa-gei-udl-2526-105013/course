---
title: "Arrencada del sistema (Part 2)"
subtitle: "Unitat 2 ¬∑ Administraci√≥ i Manteniment de Sistemes i Aplicacions (AMSA)"
author: "Jordi Mateo Forn√©s"
logo: "/figs/corporative/institute.png"
format: 
  revealjs:
    transition: fade
    slide-number: true
    incremental: true 
    chalkboard: false
    css: styles.css
    footer: "Unitat 2 ¬∑ Administraci√≥ i Manteniment de Sistemes i Aplicacions (AMSA) [üè†](/index.html)</a>"
editor: visual

execute:
  freeze: auto
  echo: false
---

## Etapes de l'arrancada

![](../figs/slides/02-booting/linux-unix-booting-process.png)


## Qu√® √©s el GRUB/GRUB2? {.smaller}

**GRUB** (*GRand Unified Bootloader*) √©s un gestor d'arrencada molt utilitzat en sistemes operatius Linux i altres sistemes Unix-like. La seva funci√≥ principal √©s carregar un kernel del sistema operatiu a la mem√≤ria i iniciar el proc√©s d'arrencada.

- **Funcions principals**:
  - Permet seleccionar entre m√∫ltiples sistemes operatius instal¬∑lats en un mateix ordinador (multi-boot).
  - Proporciona una interf√≠cie per configurar opcions d'arrencada, com ara par√†metres del kernel.
  - Suporta diferents sistemes de fitxers, permetent accedir a particions amb formats com ext4, Btrfs, XFS, entre altres.
  - Ofereix una consola interactiva per a la resoluci√≥ de problemes i la configuraci√≥ avan√ßada.

## Etapes d'execuci√≥ del GRUB {.smaller}

- **Stage 1**:
  - En sistemes BIOS: efectivament √©s el codi al MBR (o VBR) ‚Üí molt petit (‚â§ 446 bytes).
  - En sistemes UEFI: √©s un fitxer executable EFI (normalment a /boot/efi/EFI/grub/grubx64.efi).
- **Stage 1.5** (nom√©s en BIOS, opcional):
  - Proporciona suport b√†sic per a sistemes de fitxers.
  - Normalment es troba en sectors buits despr√©s del MBR (espai entre MBR i primera partici√≥). *core.img*.
- **Stage 2**:
  - Cont√© el GRUB complet amb el men√∫ d'arrencada.
  - Pot carregar m√≤duls addicionals (drivers de FS, v√≠deo, xarxa, criptografia...).
  - Llegeix el fitxer de configuraci√≥ (grub.cfg) i carrega el kernel i l'initramfs a la mem√≤ria.
  - Transfereix el control al kernel per iniciar el sistema operatiu.

## Diagrama d'arrencada del GRUB {.smaller}

![](../figs/slides/02-booting/grub.png)

- **set root='hd0,msdos1'**: Indica la partici√≥ arrel on es troba el sistema operatiu que es vol arrencar.
- **linux /vmlinuz root=/dev/sda1**: Indica la ruta del kernel i la partici√≥ arrel.
- **initrd /initramfs.img**: Indica la ruta de l'initramfs.
- **boot**: Inicia el sistema operatiu.


## Configuraci√≥ del GRUB (I) {.smaller}

El fitxer principal de configuraci√≥ de **GRUB2** √©s:  
- `/boot/grub/grub.cfg` (o `/boot/grub2/grub.cfg` en algunes distribucions).  

:::{.callout-warning title="Important"}  
**No s‚Äôha d‚Äôeditar directament**, ja que es regenera autom√†ticament.  
:::

### Fitxers i directoris
- **`/etc/default/grub`** : Opcions generals de configuraci√≥ i variables d'entorn. 
- **`/etc/grub.d/`**  
  Directori amb scripts que generen `grub.cfg`:  
  - `00_header` ‚Üí configuraci√≥ inicial  
  - `10_linux` ‚Üí detecta kernels Linux  
  - `30_os-prober` ‚Üí detecta altres SO  
  - `40_custom` ‚Üí entrades personalitzades  

        
## Configuraci√≥ del GRUB (II)

Un cop modificats els fitxers anteriors, cal regenerar `grub.cfg`:  

```bash
# Distribucions Debian/Ubuntu
sudo update-grub

# Distribucions Arch, Fedora, openSUSE...
sudo grub-mkconfig -o /boot/grub/grub.cfg
```

## Variables  `/etc/default/grub` {.smaller}

| Variable               | Descripci√≥                                                                                       |
|----------------------------------------|---------------------------------------------------------------------------------------------------|
| `GRUB_BACKGROUND`       | Imatge de fons que es mostrar√† al men√∫ d'arrencada.  |
| `GRUB_TIMEOUT`          | Temps en segons abans de carregar l'entrada predeterminada.      |
| `GRUB_DEFAULT`          | Entrada per defecte que es carregar√† (index o nom)            |
| `GRUB_CMDLINE_LINUX`    | Opcions de l√≠nia de comandes que es passen al nucli en arrencar el sistema.                      |
| `GRUB_DISABLE_RECOVERY` | Si **true**, desactiva les opcions de mode de recuperaci√≥.  |
| `GRUB_DISABLE_OS_PROBER`| Si **true**, impedeix que GRUB busqui altres sistemes operatius instal¬∑lats.       |
| `GRUB_PRELOAD_MODULES`  | Llista de m√≤duls GRUB que es carregaran abans de mostrar el men√∫ d'arrencada.   |      

## Par√†metres del kernel m√©s comuns {.smaller}

| Par√†metre               | Descripci√≥                                                                                       |
|----------------------------------------|---------------------------------------------------------------------------------------------------|
| `quiet`                | Suprimeix els missatges del nucli durant l'arrencada.                                           |
| `single`               | Inicia el sistema en mode d'usuari √∫nic (single-user mode) per a tasques de manteniment.        |
| `splash`               | Mostra una imatge de fons durant l'arrencada en lloc de missatges de text.                     |
| `nomodeset`           | Desactiva la detecci√≥ de modes de v√≠deo, √∫til per a solucions de problemes amb gr√†fics.       |
| `root=`               | Especifica la partici√≥ arrel del sistema de fitxers.                                           |
| `init=`               | Especifica un fitxer d'init alternatiu.                                                        |
| `ro`                  | Muntatge de la partici√≥ arrel en mode de nom√©s lectura durant l'arrencada.                      |
| `rw`                  | Muntatge de la partici√≥ arrel en mode de lectura i escriptura durant l'arrencada.               |                      |
| `systemd.unit =` | Especifica el target de systemd a iniciar (ex: `multi-user.target`, `graphical.target`).        |

## Consideracions addicionals

- En UEFI, GRUB2 √©s un fitxer EFI a /boot/efi/EFI/<distro>/grubx64.efi.
- Es poden protegir entrades amb contrasenya a /etc/grub.d/40_custom.
- Al men√∫, amb `e` es poden passar par√†metres temporals al kernel.
- GRUB permet *chainloading* per arrencar altres SO (Windows, BSD).
- Amb UEFI Secure Boot, GRUB pot ser signat digitalment.

## Secure Boot {.smaller}

**Secure Boot** √©s una caracter√≠stica de seguretat del firmware UEFI que assegura que nom√©s es carregui i s'executi programari de confian√ßa durant el proc√©s d'arrencada del sistema. 

1. Quan s‚Äôenc√©n el sistema
   - UEFI comprova la signatura digital del bootloader EFI (per exemple, grubx64.efi) abans de carregar-lo.
   - La signatura √©s comparada amb les claus de confian√ßa emmagatzemades en la DB (Database of allowed signatures) del firmware.
   - Si la signatura √©s v√†lida, UEFI carrega i executa el bootloader. Sin√≥, impedeix l‚Äôexecuci√≥ del bootloader i mostra un missatge d‚Äôerror.
2. Bootloader signat (GRUB EFI)
    - Pot carregar m√≤duls addicionals signats, que tamb√© poden ser verificats pel mateix GRUB (*opcional*).
3. Kernel i initramfs
    - El kernel Linux tamb√© pot estar signat (*opcional*, si s‚Äôutilitza Linux Kernel Signing).
    - Si s‚Äôutilitza [Shim](http://github.com/rhboot/shim), aquest actua com a intermediari: el firmware UEFI confia en Shim, i Shim verifica despr√©s GRUB i el kernel.

## Problemes de Secure Boot

- **Compatibilitat**: No tots els sistemes operatius o distribucions Linux suporten Secure Boot de manera nativa.
- **Claus de confian√ßa**: La gesti√≥ de claus pot ser complexa, especialment en entorns corporatius.
- **Actualitzacions**: Les actualitzacions del bootloader o del kernel poden requerir la re-signatura dels components.
- **Restriccions**: Algunes funcionalitats avan√ßades poden estar limitades per les pol√≠tiques de Secure Boot.

Malgrat Secure Boot, s‚Äôhan detectat vulnerabilitats que permeten carregar bootloaders no autoritzats en alguns dispositius ([ArsTechnica, 2024](https://arstechnica.com/security/2024/07/secure-boot-is-completely-compromised-on-200-models-from-5-big-device-makers/?s=31)).


# Inici del sistema operatiu

## Qu√® √©s el kernel? {.smaller}

El **kernel** √©s el nucli del sistema operatiu, *responsable de gestionar els recursos del sistema, com la mem√≤ria, el processador, els dispositius d'entrada/sortida, la xarxa i els processos d'usuari*. 

::: columns
::: {.column width="50%"}
::: center-container
![](../figs/slides/02-booting/kernel.png)
:::
:::
::: {.column width="50%"}

- El kernel es carrega a la mem√≤ria RAM durant el proc√©s d'arrencada i es troba normalment a la partici√≥ arrel del sistema de fitxers (generalment en **/boot**). 

- El **kernel** √©s un programa binari que es compila espec√≠ficament per a l'arquitectura de maquinari del sistema (per exemple, x86, ARM, etc.) 

- Pot ser personalitzat amb diferents m√≤duls i controladors segons les necessitats del sistema.
:::
:::

## Carregar el kernel {.smaller}

Per carregar el kernel, el bootloader necessita:  

1. **Ruta del kernel**  
   - Normalment un fitxer com **vmlinuz-version** dins de `/boot`.  

2. **Partici√≥ arrel**  
   - La partici√≥ on es troba el sistema de fitxers del sistema operatiu.  

3. **Fitxer de configuraci√≥ del bootloader**  
   - Com **grub.cfg** en el cas de GRUB, que indica ruta del kernel, par√†metres i initramfs.  

4. **C√†rrega de l‚Äôinitramfs**  
   - **Initramfs** (*initial RAM filesystem*) √©s un sistema de fitxers temporal a RAM.  
   - Permet inicialitzar controladors b√†sics i muntar la partici√≥ arrel real abans de transferir el control al kernel complet.  


::: notes
L‚Äôinitramfs facilita la portabilitat i modularitat del kernel, permetent arrencar diferents configuracions de maquinari sense necessitat de recompilar el kernel cada cop.
:::

# Initramfs o initrd

## Qu√® √©s l'Initramfs? {.smaller}

L‚Äô**Initramfs** (*Initial RAM Filesystem*) √©s un petit sistema de fitxers integrat dins la imatge del nucli Linux.  

- Permet que el kernel pugui muntar la **partici√≥ arrel** durant l‚Äôarrencada.  
- A difer√®ncia de l‚Äôantic **initrd**, que residia en un disc, l‚Äôinitramfs es carrega completament a **RAM com a imatge comprimida**.  

:::{.fragment}
### Objectius
- Proporcionar un **sistema de fitxers temporal i m√≠nim**.  
- Carregar **m√≤duls essencials del kernel** necessaris per accedir a maquinari i sistemes de fitxers.  
- Executar scripts d‚Äôinicialitzaci√≥ abans de transferir el control al sistema complet.
:::

## Etapes de l'Initramfs (I) {.smaller}

1. **Descompressi√≥ a la RAM**  
   - El fitxer CPIO de l'initramfs es descomprimeix a un sistema de fitxers temporal a RAM (`tmpfs`), creant l‚Äôentorn m√≠nim necessari per iniciar el kernel.  
2. **Execuci√≥ de l‚Äôscript `/init`**  
   - `/init` √©s l‚Äôentrypoint principal de l‚Äôinitramfs.  
   - Executa la seq√º√®ncia d‚Äôinicialitzaci√≥: muntatge de sistemes virtuals, c√†rrega de m√≤duls i preparaci√≥ de l‚Äôentorn.  
3. **Creaci√≥ del sistema de fitxers temporal**  
   - Muntatge de `/proc`, `/sys` i `/dev`.  
   - Creaci√≥ de directoris temporals (`/tmp`, `/run`) per permetre que els scripts i utilitats funcionin.  
4. **Carregar m√≤duls del kernel**  
   - Carrega controladors necessaris per accedir a maquinari (discos, controladors de xarxa, LVM, RAID, xifrat).  
   - Si els m√≤duls estan integrats al kernel, aquesta etapa pot ser m√≠nima o nul¬∑la.  

## Etapes de l'Initramfs (II) {.smaller}

5. **Muntatge de la partici√≥ arrel real**  
   - Localitza la partici√≥ arrel (per exemple `/dev/sda1` o `UUID=...`).  
   - Muntatge en un punt temporal (`/mnt/root` o similar).  
6. **Transici√≥ al sistema complet (`switch_root`)**  
   - Substitueix l‚Äôentorn temporal de l‚Äôinitramfs pel sistema de fitxers real.  
   - Executa el binari `init` del sistema complet (normalment `/sbin/init` o systemd).  
7. **Alliberament de l‚Äôinitramfs**  
   - Destruir l‚Äôentorn temporal a RAM.  
   - Alliberar la mem√≤ria utilitzada pel sistema de fitxers temporal, deixant el control complet al sistema operatiu.  


## Caracter√≠stiques de l'Initramfs {.smaller}

- Facilita la portabilitat i modularitat del kernel, permetent arrencar diferents configuracions de maquinari sense necessitat de recompilar el kernel cada cop.
- No sempre est√† present, pot estar buit o om√®s si el sistema no necessita un espai RAM inicial (per exemple, en sistemes simples o compilacions est√†tiques del nucli).
- Es configura durant la compilaci√≥ del nucli `make menuconfig` i es pot definir el contingut de l'**initramfs** amb un fitxer de configuraci√≥, s'utiltizen variables:
  - **CONFIG_BLK_DEV_INITRD**: Activa la creaci√≥ de l'**initramfs**.
  - **CONFIG_INITRAMFS_SOURCE**: Especifica el fitxer CPIO, un directori o un fitxer d'especificaci√≥.
- Tamb√© es pot personalitzar segons les necessitats del sistema, permetent afegir **m√≤duls del kernel, scripts personalitzats o utilitats addicionals**.

## Contingut de l'initramfs {.smaller}

1. **Fitxers executables**  
   - Ex: **BusyBox**, que encapsula moltes utilitats Unix (`ls`, `cp`, `mount`, shell, etc.).  
   - Poden incloure altres programes compilats est√†ticament.  

2. **M√≤duls del kernel**  
   - Controladors per discos, xarxes, sistemes RAID o LVM.  
   - S√≥n carregats si no estan integrats dins del nucli.  

3. **Fitxers de dispositiu i sistemes especials**  
   - `/dev` cont√© dispositius com `tty` o `null`.  
   - Gestionats per utilitats com **mdev** o **udev**.  

::: {.fragment .center-container}
Tots aquests elements es troben **comprimits en un fitxer CPIO**, descomprimits a RAM durant l‚Äôarrencada i executats per l‚Äôscript `/init`.
:::

## Configuraci√≥ de l'initramfs {.smaller}

L'**initramfs** es pot personalitzar segons les necessitats del sistema, permetent afegir **m√≤duls del kernel, scripts personalitzats o utilitats addicionals**. La configuraci√≥ dep√®n de la distribuci√≥:

### Debian/Ubuntu 

```bash
update-initramfs -u -k <versi√≥>
# -u actualitza l'initramfs
# -k especifica la versi√≥ del nucli
```
<br>

### Fedora/Red Hat

```bash
dracut -f /boot/initramfs-<versi√≥>.img <versi√≥>
# -f for√ßa la regeneraci√≥
# El primer argument √©s la ruta on es vol guardar l'initramfs generat
# El segon argument √©s la versi√≥ del nucli
```

## `initramfs-tools` (Debian) (I) {.smaller}

- **`/etc/initramfs-tools/modules`**  
  Llista de **m√≤duls addicionals** del kernel a incloure a l‚Äôinitramfs, per exemple controladors de xarxa o discos RAID.  
- **`/etc/initramfs-tools/hooks/`**  
  Scripts que s‚Äôexecuten **durant la creaci√≥** de l‚Äôinitramfs, √∫tils per afegir fitxers o directoris personalitzats.  
- **`/etc/initramfs-tools/conf.d/`**  
  Fitxers de configuraci√≥ addicionals per modificar par√†metres espec√≠fics de l‚Äôinitramfs.  
- **`/etc/initramfs-tools/initramfs.conf`**  
  Configuraci√≥ principal, inclou opcions com compressi√≥, √∫s de scripts, par√†metres de muntatge.  
- **`/usr/share/initramfs-tools/`**  
  Scripts i fitxers est√†ndard utilitzats per initramfs-tools, no modificats normalment.  

## `initramfs-tools` (Debian) (II) {.smaller}
- **`/etc/initramfs-tools/scripts/`**  
  Scripts que s‚Äôexecuten **durant l‚Äôarrencada**:
     - **`init-top/`** ‚Üí scripts executats **just despr√©s de descomprimir l‚Äôinitramfs** i abans de muntar `/proc`, `/sys` i `/dev`. Ideal per inicialitzar serveis cr√≠tics o preparar dispositius especials.  
    - **`init-bottom/`** ‚Üí scripts executats **just abans de fer `switch_root`** al sistema complet. √ötil per passos finals com muntar la partici√≥ arrel, desbloquejar LUKS o activar LVM.  
    - **`local-bottom/`** ‚Üí scripts addicionals definits per l‚Äôadministrador.
    - **`local-top/`** ‚Üí scripts addicionals definits per l‚Äôadministrador.
    - **`premount/`** ‚Üí scripts executats **abans de muntar la partici√≥ arrel**. Ideal per preparar dispositius o sistemes de fitxers especials.
    - **`mount/`** ‚Üí scripts executats **durant el muntatge de la partici√≥ arrel**. √ötil per passos espec√≠fics relacionats amb el muntatge.
    - **`cleanup/`** ‚Üí scripts executats **despr√©s de fer `switch_root`** al sistema complet. Ideal per netejar recursos temporals o realitzar tasques posteriors a l‚Äôarrencada.


## `dracut` (Fedora/Red Hat) {.smaller}

- **`/etc/dracut.conf`**  
  Fitxer de configuraci√≥ principal de Dracut, on es poden definir opcions generals: compressi√≥, tipus de fitxer d‚Äôinitramfs, par√†metres del kernel, etc.  
- **`/etc/dracut.conf.d/`**  
  Fitxers de configuraci√≥ addicionals, √∫tils per a configuracions espec√≠fiques de m√≤duls o projectes.  
- **`/usr/lib/dracut/modules.d/`**  
  Cont√© **m√≤duls est√†ndard** de Dracut (ex: m√≤duls de xarxa, lvm, cryptsetup), carregats autom√†ticament segons la configuraci√≥.  
- **`/etc/dracut/modules.d/`**  
  M√≤duls personalitzats creats per l‚Äôadministrador, per afegir scripts o fitxers espec√≠fics.  
- **`/usr/share/dracut/`**  
  Cont√© scripts i fitxers est√†ndard utilitzats durant la generaci√≥ de l‚Äôinitramfs, igual que a initramfs-tools.  


## Quan regenerar l'initramfs? {.smaller}

- **Actualitzaci√≥ del nucli**: Quan es *compila o instal¬∑la un nou kernel*, l'initramfs associat ha de ser regenerat per garantir que carrega correctament els m√≤duls i el maquinari necessari.
- **Configuraci√≥ RAID**: Si es modifiquen o s'afegeixen sistemes *RAID*, l'initramfs ha de reflectir aquests canvis per assegurar un arrencada correcta.
- **Xifrat de discos**: Per a sistemes amb particions xifrades (*LUKS*), cal actualitzar l'initramfs despr√©s de canvis en la configuraci√≥ de xifrat per poder accedir a les particions durant l'arrencada.
- **Configuraci√≥ de xarxa**: Si es canvien components de xarxa que s'utilitzen en el proc√©s d'arrencada (*sistemes amb arrencada PXE*).
  

## Cas d'us: USB amb clau de desxifrat {.smaller}

Un cas d'√∫s com√∫ de l'**initramfs** √©s en sistemes amb **particions xifrades amb LUKS** que utilitzen una **clau emmagatzemada en un dispositiu USB** per desxifrar la partici√≥ arrel durant l'arrencada.

::: columns
::: {.column width="40%"}

1. Munti els sistemes virtuals necessaris (`/proc`, `/sys`).  
2. Munti la unitat USB que cont√© la clau.  
3. Llegeixi la clau i desxifri la partici√≥ LUKS.  
4. Activar volums LVM si cal.  
5. Muntar la partici√≥ arrel i transferir el control amb `switch_root`.

:::
::: {.column width="60%"}

```bash
#!/bin/busybox sh
mount -t proc proc /proc
mount -t sysfs sys /sys
mount /dev/sdb1 /mnt
KEYFILE=/mnt/keyfile
cryptsetup luksOpen /dev/sda1 crypted --key-file $KEYFILE
echo "Retira el dispositiu USB i prem Enter per continuar."
read
vgchange -a y
mount /dev/mapper/vg-root /mnt
exec switch_root /mnt /sbin/init
```
:::
:::

## PID 1: init/systemd {.smaller}

Quan s'acaba el proc√©s d'inicialitzaci√≥ del sistema en l'espai del kernel i es descomprimeix i executa l'initramfs, es produeix una transici√≥ important cap a l'espai d'usuari.

```bash
exec switch_root /mnt /sbin/init
```

- El comandament `switch_root` substitueix l'arrel del sistema de fitxers actual (l'initramfs) per la partici√≥ arrel real del sistema operatiu.
- El kernel deixa de gestionar directament els processos i passa el control a un proc√©s en l'espai d'usuari.
- El proc√©s **PID 1** √©s el primer proc√©s que s'inicia en l'espai d'usuari i √©s responsable de la gesti√≥ dels processos del sistema operatiu. 
- Tradicionalment, aquest proc√©s era el programa **init**, per√≤ en els sistemes moderns, *systemd* ha substitu√Øt *init* com a responsable principal de la gesti√≥ de processos.


## Funcions de PID 1 {.smaller}

1. **Gesti√≥ de la inicialitzaci√≥ del sistema**. Carrega els serveis i dimonis necessaris per al bon funcionament del sistema.
2. **Gesti√≥ dels processos del sistema**. Controla la creaci√≥, execuci√≥ i finalitzaci√≥ dels processos. Si un proc√©s orfe (un proc√©s que perd el seu proc√©s pare) continua en execuci√≥, el PID 1 assumeix la seva gesti√≥ i, eventualment, la seva terminaci√≥.
3. **Arrel de l'arbre de processos**: Tots els altres processos del sistema pengen d'ell, directament o indirectament. Aix√≤ fa que sigui fonamental per a l'estabilitat i la continu√Øtat del sistema.
4. **Apagat i reinici del sistema**: El PID 1 tamb√© √©s responsable de controlar l'apagat i reinici del sistema, garantint que els processos es tanquin adequadament i que el sistema es desconnecti de manera segura

## Systemd vs SysVinit {.smaller}

El canvi de **SysVinit** a [**Systemd**](https://systemd.io/) en moltes distribucions de Linux va ser motivat per la necessitat de millorar l'efici√®ncia i la gesti√≥ dels serveis del sistema.

::: columns
::: {.column width="45%"}

### SysVinit

- **Seq√ºencial**: Basat en scripts. *Cada servei dep√®n de l'execuci√≥ completa del servei anterior, la qual cosa pot ser lenta*.
- **Simple**: Cada servei s'inicia amb un script directament llegible i modificable per l'administrador del sistema.
- **Inflexible**: Dificultat engestionar depend√®ncies. *No permet arrencar serveis en paral¬∑lel ni controlar els processos un cop arrencats*.

:::
::: {.column width="55%"}

### Systemd

- **Rendiment**: Capacitat de carregar serveis en paral¬∑lel. Reducci√≥ temps d'inici del sistema.
- **Modularitat**: Els serveis es gestionen a trav√©s d'unitats (*unit files*) que poden especificar depend√®ncies, condicions de reinici autom√†tic,etc.
- **Cgroups**: Limitar/gestionar els recursos assignats a cada servei.
- **Monitoratge**: Control i seguiment granular dels serveis amb *journalctl*.

:::
:::

## Cr√≠tiques a Systemd {.smaller}

- **Complexitat**  
  - Integra m√∫ltiples funcionalitats (gesti√≥ de serveis, journal, timers, logind, networkd, etc.) en un sol proc√©s. Aix√≤ pot augmentar la superf√≠cie de fallada i dificultar la depuraci√≥.  

- **Trenca amb la filosofia Unix tradicional**  
  - Unix promou eines petites, especialitzades i composables.  
  - Systemd concentra moltes tasques en un √∫nic sistema de gesti√≥.

- **Depend√®ncia del sistema**  
  - Molts scripts, paquets i eines modernes depenen de systemd, dificultant la compatibilitat amb sistemes alternatius (SysVinit, OpenRC).

::: {.fragment }
#### Debat en la comunitat

- Els defensors de **systemd** argumenten que simplifica l‚Äôadministraci√≥ de sistemes moderns i ofereix funcions que abans requerien m√∫ltiples eines externes.  
- Els cr√≠tics insisteixen en que √©s massa intrusiu i redueix la flexibilitat per a administradors avan√ßats i entorns m√≠nims.  
:::

## Backdoor en XZ Utils (I) {.smaller}

Recents vulnerabilitats en paquets com **xz-utils** han posat en evid√®ncia la complexitat de *Systemd* i com una backdoor ocult pot comprometre gran part de la infraestructura moderna de Linux.

- El backdoor va ser introdu√Øt de manera gradual, comen√ßant amb contribucions sospitoses al projecte **libarchive el 2021**.
- Durant el 2022, un desenvolupador desconegut, *JiaT75*, va guanyar influ√®ncia dins del projecte **xz-utils**, substituint el contacte del mantenidor original i introduint canvis que van ocultar les vulnerabilitats.
- El 2023, *JiaT75* va introduir modificacions malicioses a **xz-utils**, aprofitant-les per comprometre sistemes a trav√©s de depend√®ncies amb Systemd.


**[CVE-2024-3094](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3094)**: Vulnerabilitat que permet l'execuci√≥ de codi malici√≥s en el sistema mitjan√ßant un defecte en la descompressi√≥ de fitxers **.xz**.


## Backdoor en XZ Utils (II) {.smaller}

Aquesta vulnerabilitat va afectar molts servidors Linux, que van actualitzar **xz-utils** amb la versi√≥ compromesa.

- **liblzma**  √©s una llibreria de compressi√≥ que es pot enlla√ßar amb altres programes. Per exemple, **OpenSSH** es pot vincular a **liblzma** per gestionar la descompressi√≥ de fitxers de configuraci√≥.
- En sistemes amb **systemd**, **OpenSSH** enlla√ßa amb **systemd**, que a la vegada enlla√ßa amb **liblzma**. Aix√≤ permet a **XZ Utils** controlar indirectament serveis essencials com **sshd**.
- Mitjan√ßant una backdoor oculta en versions modificades de **xz-utils**, un atacant amb una clau de xifrat pr√®viament establerta podria carregar codi malici√≥s en certificats SSH i executar-lo en dispositius compromesos.

::: center-container
Aquests esdeveniments posen de manifest les contrapartides de la complexitat de **Systemd** i com una vulnerabilitat en un paquet aparentment inofensiu com **xz-utils** pot tenir un impacte significatiu en la seguretat del sistema i serveis cr√≠tics com **sshd**.
:::

## Executar els Targets o Runlevels {.smaller}

El **PID 1** executa els *targets* de systemd. En sistemes m√©s antics, s'utilitzaven els *runlevels* d'init. Els targets representen un conjunt de serveis i m√≤duls que s'executen per a cada estat del sistema. La seva funci√≥ √©s definir l'estat del sistema i els serveis que s'han de carregar en aquest estat. La transici√≥ entre els *targets* es pot fer manualment amb la comanda `systemctl isolate` o autom√†ticament amb la comanda `systemctl set-default`.

::: {.fragment}
- **default.target**: Apunta a *graphical.target* o *multi-user.target*-
- **graphical.target**: Defineix un entorn gr√†fic.
- **multi-user.target**: Proporciona un entorn no gr√†fic, permetent m√∫ltiples usuaris al sistema, habitual per a servidors.
- **rescue.target**: Proporciona un entorn de rescat amb una consola de l√≠nia de comandes.
- **emergency.target**: Ofereix un entorn d'emerg√®ncia que inicialitza el m√≠nim de serveis necessaris per a la soluci√≥ de problemes.
- **shutdown.target**: Gestiona l'apagat del sistema.
- **reboot.target**: Gestiona el reinici del sistema.
:::

## Units de systemd {.smaller}

Els **units** s√≥n els fitxers de configuraci√≥ de **systemd** que defineixen els serveis, ens permeten gestionar-los i controlar-los. 

- `/etc/systemd/system/` ‚Äì Fitxers d'unitat personalitzats per l'administrador.
- `/run/systemd/system/` ‚Äì Configuraci√≥ en temps d'execuci√≥, √©s a dir, afecta nom√©s un arrencada √∫nica.
- `/usr/lib/systemd/system/` ‚Äì Configuraci√≥ proporcionada per la distribuci√≥. A Debian √©s `/lib/systemd/system/`.

Quan hi ha dos fitxers de configuraci√≥ amb el mateix nom, **systemd** carregar√† nom√©s un des del directori que estigui m√©s alt en la jerarquia. Per exemple, la configuraci√≥ a `/etc` sempre sobreescriu la configuraci√≥ a `/usr`.

Despr√©s de canviar la configuraci√≥, √©s necessari recarregar **systemd** amb: ```systemctl daemon-reload```.

## Tipus d'unitats {.smaller}

- **Serveis**: Fitxers que defineixen com s'inicien, s'aturen i es gestionen els serveis. Ex: `/etc/systemd/system/sshd.service` (servei SSH).
- **Sockets**: Units que gestionen els *sockets* de comunicaci√≥ per als serveis.
- **Devices**: Units que representen dispositius de maquinari.
- **Mounts**: Units que gestionen els punts de muntatge del sistema de fitxers.
- **Paths**: Units que monitoren els canvis en fitxers o directoris espec√≠fics.
- **Timers**: Units que planifiquen tasques per a la seva execuci√≥ en moments espec√≠fics.
- **Targets**: Units que agrupen altres units per a l'arrencada d'estats del sistema.

## Targets i Systemd {.smaller}

![](../figs/slides/02-booting/systemd.png)

## Exemple de fitxer d'unitat {.smaller}

```bash
[Unit]
Description=CUPS Scheduler
Documentation=man:cupsd(8)
After=network.target
[Service]
ExecStart=/usr/sbin/cupsd -l
Type=notify
[Install]
Also=cups.socket cups.path
WantedBy=printer.target
```

::: notes
Aquest fitxer defineix el servei **CUPS** (Common Unix Printing System) √©s un sistema que t√© una depen√®ncia amb la xarxa (`After=network.target`), s'inicia amb el comandament `/usr/sbin/cupsd -l` i es configura per iniciar-se autom√†ticament quan s'arrenca el sistema (`WantedBy=printer.target`). Printer.target √©s un *target* que agrupa serveis relacionats amb la impressi√≥. Cups.socket i cups.path s√≥n altres unitats que tamb√© s'inicien quan s'inicia el servei CUPS ja que estan lligades a aquest servei. El tipus de servei √©s `notify`, el qual indica que el servei enviar√† una notificaci√≥ a systemd quan estigui llest.
:::


## Depend√®ncies entre unitats {.smaller}

Les unitats s√≥n objectes gestionats per **systemd**. Les depend√®ncies s√≥n associacions entre elles. Cada tipus d'unitat t√© algunes depend√®ncies per defecte (a menys que s'especifiqui el contrari). 

::: columns
::: {.column width="65%"}
#### Relacionals

- **Requires**: Indica que una unitat dep√®n d'una altra unitat per a la seva activaci√≥. Si la unitat requerida no est√† activa, la unitat que la requereix no s'activar√†.
- **Wants**: Similar a **Requires**, per√≤ no √©s tan estricte. Si la unitat requerida no est√† activa, la unitat que la vol no es bloquejar√†.
- **BindsTo**: Similar a **Requires**, per√≤ si la unitat requerida es det√©, la unitat que la vincula tamb√© es detindr√†.
- **PartOf**: Indica que una unitat √©s part d'una altra unitat. Si la unitat pare es det√©, la unitat fill tamb√© es detindr√†.
- **Conflicts**: Indica que dues unitats no poden estar actives al mateix temps. Si una unitat s'activa, l'altra es detindr√† autom√†ticament.

:::
::: {.column width="35%"}
#### Ordenaci√≥

- **After**: Indica que una unitat s'ha d'iniciar despr√©s d'una altra unitat. No crea una depend√®ncia estricta, nom√©s defineix l'ordre d'inici.
- **Before**: Indica que una unitat s'ha d'iniciar abans d'una altra unitat. No crea una depend√®ncia estricta, nom√©s defineix l'ordre d'inici.

:::
:::

## Transaccions a systemd (I) {.smaller}

Cada vegada que l‚Äôusuari o un servei sol¬∑licita una acci√≥ (per exemple, iniciar o aturar un servei), es crea una **transacci√≥** que gestiona l‚Äôexecuci√≥ ordenada de les unitats afectades.

1. **Creaci√≥ de feines (jobs)**  
   - Es crea una feina per a la unitat sol¬∑licitada.  
   - S‚Äôafegeixen recursivament les feines corresponents a totes les **depend√®ncies** de la unitat.

2. **Minimitzaci√≥ de la transacci√≥**  
   - Eliminar feines duplicades o redundants.  
   - Eliminar feines que no estiguin referenciades per cap altre job (ancoratge).

3. **Resoluci√≥ de cicles de depend√®ncies**  
   - Detectar **loops** en el gr√†fic de depend√®ncies.  
   - Trencar-los eliminant feines problem√†tiques per evitar deadlocks.

## Transaccions a systemd (I) {.smaller}

4. **Fusi√≥ i optimitzaci√≥ de feines**  
   - Fusionar feines similars per reduir el nombre d‚Äôoperacions.  
   - Prioritzar feines ja existents a la cua.

5. **Enviament i execuci√≥**  
   - Afegir les feines a la **cua de jobs** de systemd.  
   - Executar les feines segons la depend√®ncia i l‚Äôordre optimitzat.

::: {.fragment}
Garanteix que les unitats es gestionin de manera at√≤mica i ordenada, permetent a systemd paral¬∑lelitzar serveis mentre respecta les depend√®ncies.
:::

::: notes
- Les **transaccions** garanteixen que les unitats es gestionin de manera at√≤mica i ordenada.  
- Aix√≤ permet a systemd **paral¬∑lelitzar serveis** mentre respecta les depend√®ncies.  
- Cadascuna de les feines cont√© informaci√≥ sobre la unitat, la seva acci√≥ (`start`, `stop`, `reload`) i les condicions d‚Äôexecuci√≥.
:::

## `systemctl` (I) {.smaller}

La comanda `systemctl` √©s l'eina principal per interactuar amb **systemd** i gestionar els serveis i unitats del sistema. Algunes de les operacions m√©s comunes inclouen:

| Comanda                        | Descripci√≥                                      |
|-------------------------------|------------------------------------------------|
| `systemctl start <unit>`      | Inicia una unitat (servei, socket, etc.).      |
| `systemctl stop <unit>`       | Atura una unitat.                             |
| `systemctl restart <unit>`    | Reinicia una unitat.                           |
| `systemctl status <unit>`     | Mostra l'estat actual d'una unitat.            |
| `systemctl enable <unit>`     | Habilita una unitat perqu√® s'inici√Ø autom√†ticament en arrencar el sistema. |
| `systemctl disable <unit>`    | Deshabilita una unitat perqu√® no s'inici√Ø autom√†ticament. |
| `systemctl is-active <unit>`  | Comprova si una unitat est√† activa.         |
| `systemctl is-enabled <unit>` | Comprova si una unitat est√† habilitada per arrencar autom√†ticament. |

## `systemctl` (II) {.smaller}

| Comanda                        | Descripci√≥                                      |
|-------------------------------|------------------------------------------------|
| `systemctl list-units`      | Llista totes les unitats carregades actualment.         |
| `systemctl list-unit-files` | Llista tots els fitxers d'unitats disponibles.        |
| `systemctl list-dependencies <SERVICE>`   | Mostra les depend√®ncies d'una unitat. |
| `systemctl list-jobs`    | Mostra les feines pendents i en execuci√≥.                           |


## Unitat [`INSTALL`] {.smaller}

```bash
[Install]
WantedBy=multi-user.target
Also=sysstat-collect.timer
Also=sysstat-summary.timer
Alias=monitoring.service
```
- La secci√≥ `[Install]` defineix com s'instal¬∑la i s'inicia una unitat.
- `WantedBy=multi-user.target` indica que aquesta unitat s'ha d'iniciar quan s'arrenca el sistema en mode multiusuari (runlevel 3).
- `Also=` permet associar altres unitats que s'han d'iniciar juntament amb aquesta.
- `Alias=` crea un nom alternatiu per a la unitat, facilitant la seva refer√®ncia.

::: notes
En aquest cas, la unitat s'iniciar√† autom√†ticament en arrencar el sistema en mode multiusuari, i tamb√© s'iniciaran els temporitzadors `sysstat-collect.timer` i `sysstat-summary.timer`. A m√©s, es pot referenciar aquesta unitat amb el nom alternatiu `monitoring.service`.
:::

## Opcions [`Service`] (I) {.smaller}

|Opci√≥|Descripci√≥|
|-----|----------|
|`Type=`|Defineix el tipus de servei (simple, forking, oneshot, notify, idle).|
|`ExecStart=`|Comanda que s'executa per iniciar el servei.|
|`ExecStop=`|Comanda que s'executa per aturar el servei.|
|`ExecReload=`|Comanda que s'executa per recarregar la configuraci√≥ del servei.|
|`RemainAfterExit=`|Indica si el servei es mant√© actiu despr√©s de finalitzar.|
|`Restart=`|Defineix si el servei s'ha de reiniciar en cas de fallada.|
|`User=`|Defineix l'usuari amb el qual s'executa el servei.|
|`Group=`|Defineix el grup amb el qual s'executa el servei.|

## Opcions [`Service`] (II) {.smaller}

|Opci√≥|Descripci√≥|
|-----|----------|
|`Environment=`|Defineix variables d'entorn per al servei.|
|`WorkingDirectory=`|Defineix el directori de treball del servei.|
|`PIDFile=`|Especifica el fitxer que cont√© el PID del servei.|
|`TimeoutStartSec=`|Temps d'espera per a l'inici del servei.|
|`TimeoutStopSec=`|Temps d'espera per a l'aturada del servei.|
|`StandardOutput=`|Defineix on s'envia la sortida est√†ndard del servei.|
|`StandardError=`|Defineix on s'envia l'error

## Tipus de serveis (I) {.smaller}

- **Simple**: Per defecte, aquest servei s'inicia immediatament despr√©s del `fork()`. No espera cap senyal de que el servei estigui llest.
- **Forking**: Aquest tipus de servei √©s per a processos que es bifurquen (fork) i es converteixen en dimonis. El servei es considera actiu despr√©s que el proc√©s pare finalitzi.
- **Oneshot**: Aquest tipus √©s per a serveis que realitzen una tasca √∫nica i despr√©s finalitzen. Systemd espera que el proc√©s acabi abans de considerar el servei com a actiu.
- **Notify**: Aquest tipus de servei utilitza el mecanisme de notificaci√≥ de systemd per informar quan est√† llest. El servei ha d'enviar una notificaci√≥ expl√≠cita a systemd.
- **DBus**: Aquest tipus de servei s'utilitza per a serveis que es comuniquen a trav√©s de DBus. El servei es considera actiu quan el nom del bus apareix al bus de sistema.
- **Idle**: Aquest tipus de servei s'inicia nom√©s quan el sistema est√† inactiu, √©s a dir, quan no hi ha altres feines pendents.

## Efecte del tipus de servei al runtime {.smaller}

![](../figs/slides/02-booting/service-types.png)

## Script de l'usuari {.smaller}

Un cop s'han carregat tots els serveis i el sistema est√† en marxa, els usuaris poden iniciar sessi√≥ al sistema. Els scripts de l'usuari es troben a la carpeta `/etc/profile.d/` i s'executen quan l'usuari inicia sessi√≥.

- **/etc/profile**: Cont√© la configuraci√≥ global per a tots els usuaris. S'executa en iniciar sessi√≥ en un entorn de shell.
- **/etc/bashrc**: Proporciona configuraci√≥ per a shells interactius. S'executa cada vegada que s'inicia una nova sessi√≥ de shell.
- **~/.bashrc**: Fitxer de configuraci√≥ espec√≠fic per a l'usuari, que s'executa en iniciar una sessi√≥ de shell interactiu.
- **~/.bash_profile**: S'executa quan l'usuari inicia sessi√≥ a la terminal. Normalment, s'utilitza per configurar l'entorn de l'usuari, incloent la configuraci√≥ de l'PATH.
- **~/.bash_logout**: S'executa quan l'usuari tanca la sessi√≥ de shell. Aqu√≠ es poden incloure comandes de neteja o tancament.
- **~/.bash_history**: Fitxer que emmagatzema l'hist√≤ric de les comandes executades per l'usuari en la sessi√≥ de shell.

## That's all

::::::: columns
:::: {.column width="45%"}
::: {.callout-note title="Take Home Message"}
El proc√©s d'arrencada √©s un proc√©s complex. Els administradors de sistemes han de con√®ixer aquest proc√©s per poder gestionar i solucionar problemes durant l'arrencada del sistema i garantir un sistema segur, estable i eficient.
:::
::::

::: {.column width="5%"}
:::

::: {.column width="50%"}
![](https://static.posters.cz/image/750/posters/looney-tunes-thats-all-folks-i295.jpg){width="70%"}
:::
:::::::