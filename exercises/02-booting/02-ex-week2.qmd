---
title: Arrancada UEFI b√†sica amb QEMU
lang: ca
---

## Tetris amb UEFI üïπÔ∏è

En aquest exercici aprendrem a crear un entorn d'arrencada UEFI senzill utilitzant QEMU. A difer√®ncia de la BIOS tradicional, la UEFI utilitza fitxers executables en format PE (Portable Executable) per carregar els sistemes operatius. Aquests fitxers es col¬∑loquen en una partici√≥ especial del disc anomenada ESP (EFI System Partition).

L‚Äôobjectiu final √©s carregar i executar un petit joc de Tetris dins de l‚Äôentorn UEFI.


### Preparar l'entorn

Per a aquest laboratori, necessitem una m√†quina virtual amb Debian i una interf√≠cie gr√†fica, ja que la UEFI per defecte utilitza un entorn gr√†fic.

Si no teniu una interf√≠cie gr√†fica, podeu instal¬∑lar-la amb la seg√ºent comanda:

```bash
su -c "apt install task-gnome-desktop -y"
```

A m√©s, necessitem instal¬∑lar les eines necess√†ries per compilar i executar el nostre codi UEFI.

```bash
su -c "apt install qemu-system-x86 gcc-x86-64-linux-gnu nasm make gnu-efi gdisk mtools -y"
```

Finalment, clonem el repositori amb el codi font del joc de Tetris per UEFI:

```bash
git clone https://github.com/a1ive/uefi-tetris.git
cd uefi-tetris
```

:::{.callout-note title="Nota"}
Quan executeu les comandes QEMU, no ho feu amb la conexi√≥ SSH ja que us donar√† problemes amb la interf√≠cie gr√†fica. Utilitzeu la terminal de la m√†quina virtual directament.
:::

### Metode 1: Arrancant utilitzant la UEFI Shell üöÄ

Aquest m√®tode ens permetr√† executar r√†pidament un executable UEFI sense la necessitat de crear una imatge de disc. Utilitzarem la UEFI Shell, una l√≠nia de comandes que ens permet interactuar amb l'entorn UEFI.

```bash
qemu-system-x86_64 -bios /usr/share/qemu/OVMF.fd -drive format=raw,file=fat:rw:./ -net none
```

On aquest comandament:

- `bios /usr/share/qemu/OVMF.fd`: Carrega el firmware OVMF (Open Virtual Machine Firmware), que √©s la implementaci√≥ UEFI per a QEMU.
- `-drive format=raw,file=fat:rw:./`:  Munta el directori actual (./) com si fos una partici√≥ FAT. La UEFI Shell reconeix aquest format de manera nativa, donant-nos acc√©s al nostre fitxer `tetris.efi`.
- `-net none`: Deshabilita la xarxa, ja que no la necessitem per a aquest exercici.

En executar la comanda, QEMU s'iniciar√† i, com que no hi ha cap sistema operatiu per arrencar, caur√† directament a la UEFI Shell.

#### Navegant i executant el bootloader UEFI

Un cop a la UEFI Shell, accedim a la partici√≥ que QEMU ha muntat per nosaltres.

```bash
fs0:
```

La comanda `fs0:` ens canvia a la partici√≥ FAT que correspon al nostre directori. 

:::{.callout-note title="Notes"}
1. El teclat est√† en angl√®s per defecte. Per escriure el car√†cter `:` heu de pr√©mer  `Shift + √ë`.
2. Si `fs0:` no funciona, podeu llistar les particions disponibles amb la comanda `map` i provar amb les altres.
:::

Ara, podem veure els fitxers disponibles amb la comanda `ls` i veurem que el fitxer `tetris.efi` est√† present.

Finalment, executem el bootloader UEFI:

```bash
tetris.efi
```

### Metode 2: Creant una imatge de disc amb partici√≥ ESP üèóÔ∏è

Aquest m√®tode simula un escenari m√©s real, on el fitxer executable es troba en una partici√≥ dedicada al disc. La partici√≥ ESP (EFI System Partition) √©s una partici√≥ especial, formatada en FAT32, on es guarden els fitxers d'arrencada del sistema operatiu.

#### Crear la imatge del disc

Primer, creem un fitxer que far√† de disc dur virtual. Amb 64 MB n'hi ha prou.

```bash
qemu-img create -f raw tetris.img 64M
```

#### Crear la taula de particions GPT

Utilitzarem `gdisk` per crear la partici√≥ ESP. La GPT (GUID Partition Table) √©s el format modern de taules de particions, necessari per a la UEFI.

```bash
su -
cd /path/to/uefi-tetris # Canvia al directori on has clonat el repositori
gdisk tetris.img
```

A la consola de `gdisk`, utilitzarem les seg√ºents comandes:

- Pr√©mer `o` per crear una nova taula GPT.
- Pr√©mer `n` per crear una nova partici√≥.
- Pr√®mer `1` per assignar el n√∫mero de partici√≥.
- Pr√®mer `Enter` per acceptar l'inici per defecte.
- Pr√®mer `Enter` per acceptar la mida per defecte (fins al final del disc).
- Pr√®mer `ef00` per assignar el tipus EFI System Partition.
- Pr√®mer `w` per escriure els canvis i sortir.

:::{.callout-note title="Nota"}
Confirmeu tots els canvis escrivint `Y` quan se us demani. Un cop acabat, sortiu de `gdisk` amb `q`. Per assegurar-vos que la partici√≥ s'ha creat correctament, podeu utilitzar `gdisk -l tetris.img` per llistar les particions del fitxer d'imatge. Observeu que la partici√≥ t√© el tipus `EF00`, indicant que √©s una partici√≥ ESP.
:::

#### Formatejar la partici√≥ com a FAT32

Ara que tenim la partici√≥, l'hem de formatar, √©s a dir, donar-li un sistema de fitxers. La UEFI requereix que la partici√≥ ESP estigui formatada en FAT32.

- Identificar el dispositiu de bucle:

```bash
# Com a root
losetup --partscan --find --show tetris.img
```
Aquesta comanda mostrar√† el nom del dispositiu de bucle creat (p. ex., `/dev/loop0`) i la seva partici√≥ (`/dev/loop0p1`). Anoteu-ho.

- Formatejar la partici√≥:

```bash
# Com a root
mkfs.fat -F 32 /dev/loop0p1
```

#### Copiar el fitxer UEFI a la partici√≥ ESP

Ara, muntem la partici√≥ i copiem el fitxer `tetris.efi` a la ubicaci√≥ correcta dins de l'estructura de directoris esperada per la UEFI.

```bash
# Com a root
mount /dev/loop0p1 /mnt
mkdir -p /mnt/EFI/BOOT
cp tetris.efi /mnt/EFI/BOOT/BOOTX64.EFI
umount /mnt
losetup -d /dev/loop0
```

:::{.callout-note title="Observaci√≥"}
La UEFI espera trobar el fitxer d'arrencada en aquesta ubicaci√≥ espec√≠fica: `\EFI\BOOT\BOOTX64.EFI` per a sistemes x86_64. Si utilitzeu una arquitectura diferent, assegureu-vos de canviar el nom del fitxer segons sigui necessari (per exemple, `BOOTAA64.EFI` per a ARM64). Com estem emulant un sistema x86_64, utilitzem `BOOTX64.EFI`.
:::

#### Arrancar la imatge del disc amb QEMU
Finalment, podem arrencar la nostra imatge de disc amb QEMU utilitzant el firmware UEFI.

```bash
qemu-system-x86_64 -bios /usr/share/qemu/OVMF.fd -drive format=raw,file=tetris.img -net none
```

Si tot ha anat b√©, haur√≠eu de veure el joc de Tetris en funcionament a la pantalla directament sense necessitat d'entrar a la UEFI Shell.



